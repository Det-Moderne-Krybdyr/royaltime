datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Week {
  id         Int   @id @default(autoincrement())
  weekNumber Int
  year       Int
  days       Day[]
  @@unique([weekNumber, year]) // Ensure unique week/year combination
}

model Day {
  id       Int      @id @default(autoincrement())
  name     String
  date     DateTime
  absences Int
  weekId   Int
  week     Week     @relation(fields: [weekId], references: [id])
  shifts   Shift[] // One-to-many relation with shifts
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  Authenticator   Authenticator[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  shifts          Shift[] // One-to-many relation with shifts
  role            UserRole         @default(user)
  holidayRequests HolidayRequest[] // Relation to holiday requests
}

model Shift {
  id        Int      @id @default(autoincrement())
  startTime DateTime?
  endTime   DateTime?
  type      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  dayId     Int
  day       Day      @relation(fields: [dayId], references: [id])
  status    String   @default("default")
  break     Int      @default(0) // Break duration in minutes
}

model HolidayRequest {
  id        Int      @id @default(autoincrement())
  userId    String // Relation to the user
  user      User     @relation(fields: [userId], references: [id])
  startDate DateTime
  endDate   DateTime
  reason    String? // Optional reason for the holiday request
  status    String   @default("pending") // Request status: pending, approved, or rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum UserRole {
  admin
  user
}
